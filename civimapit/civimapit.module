<?php

// We can't use the API to write view only fields, and we can't reliably look up column names
// which means a fair amount of stuff needs to be defined here and/or we need to do a few queries.
DEFINE("CIVIMAPIT_CUSTOM_GROUP_NAME", 'civicrm_value_area_information_1');
DEFINE("CIVIMAPIT_COLUMN_NAME_ward", 'ward_1');
DEFINE("CIVIMAPIT_COLUMN_NAME_council", 'council_2');
DEFINE("CIVIMAPIT_COLUMN_NAME_constituency", 'uk_parliament_constituency_3');
DEFINE("CIVIMAPIT_COLUMN_NAME_eu_region", 'european_region_4');
DEFINE("CIVIMAPIT_COLUMN_NAME_ward_ons", 'ward_ons_code_5');
DEFINE("CIVIMAPIT_COLUMN_NAME_council_ons", 'council_ons_code_6');


function civimapit_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {

	if($op!='create' AND $op!='edit'){
		return;
	}
	if($objectName!='Individual' AND $objectName!='Organization' AND $objectName!='Household'){
		return;
	}
	
	//Get postcode from saved contact.
	require_once('api/v2/Contact.php');
	$params = array(
		'contact_id' => $objectId
	);
	$contact = civicrm_contact_get($params);
	$postcode = $contact[$objectId]['postal_code'];

	// Currently, the module updates custom data attached to contact's primary address.
	// Could switch / add data associated with addresses as well / instead
	civimapit_updateContactAreaInfo( $objectId, $postcode );
}

function civimapit_updateContactAreaInfo($contactID, $postcode) {
	
	//Look up postcode in mapit and return area information
	$areaData = civimapit_lookupAreaData($postcode);
	if ($areaData == ''){
		return;
	}
		
	$labelTranslation = array (
		'ward' => CIVIMAPIT_COLUMN_NAME_ward,
		'council' => CIVIMAPIT_COLUMN_NAME_council,
		'constituency' => CIVIMAPIT_COLUMN_NAME_constituency,
		'eu_region' => CIVIMAPIT_COLUMN_NAME_eu_region,
		'ward_ons' => CIVIMAPIT_COLUMN_NAME_ward_ons,
		'council_ons' => CIVIMAPIT_COLUMN_NAME_council_ons
	);
	
	$params = array( );
	$count = 0;
	foreach($areaData as $k => $v) {
		$fieldsToUpdate[]="`{$labelTranslation[$k]}`= %{$count}";
		$params[$count] = array( $v, 'String');
		$count++;
	}
	
	$params[$count] = array( $contactID, 'Integer');
	$query = "REPLACE INTO `".CIVIMAPIT_CUSTOM_GROUP_NAME."` SET `entity_id`= %{$count}, ".implode(', ',$fieldsToUpdate);
	$updateResult = CRM_Core_DAO::executeQuery( $query, $params );
	
}

function civimapit_lookupAreaData($postcode){
	if ($postcode == ''){
		return;
	}
	$mapitResult = json_decode(@file_get_contents("http://mapit.mysociety.org/postcode/".urlencode($postcode)));
	if ($mapitResult == ''){
		CRM_Core_Session::setStatus('<br /><span style="color:red">'.ts('Could not find valid postcode data - please check your postcode. You could use the <a href="%1">mapit api</a> to do that.', array(1=>'http://mapit.mysociety.org/')).'</span>', true);
		return;
	}
	//Need to calculate Ward and Council using shortcuts because the name for ward and council depends on the area this postcode is in
	$areaData['ward'] = $mapitResult->areas->{$mapitResult->shortcuts->ward}->name;
	$areaData['council'] = $mapitResult->areas->{$mapitResult->shortcuts->council}->name;

	$fieldsToReturn = array('WMC' => 'constituency',  'EUR' => 'eu_region');

	foreach($mapitResult->areas as $area) {
		if(in_array($area->type, array_keys($fieldsToReturn))){
			$areaData[$fieldsToReturn[$area->type]]=$area->name;
		}
	}

	$areaData['ward_ons'] = $mapitResult->areas->{$mapitResult->shortcuts->ward}->codes->ons;
	$areaData['council_ons'] = $mapitResult->areas->{$mapitResult->shortcuts->council}->codes->ons;
	
	return $areaData;
}



